generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DeliveryType {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  storeDeliveryOption StoreDeliveryOption[]
}

model District {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  userAddress         UserAddress[]
  storeAddress        StoreAddress[]
  storeDeliveryOption StoreDeliveryOption[]
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  fullname         String
  mobile           String
  isBlocked        Boolean  @default(false) @map("is_blocked")
  isEmailVerified  Boolean  @default(false) @map("is_email_verified")
  isMobileVerified Boolean  @default(false) @map("is_mobile_verified")
  createdAt        DateTime @default(now()) @map("createdAt")
  updatedAt        DateTime @updatedAt @map("updated_at")

  otps      otp[]
  addresses UserAddress[]
}

enum Type {
  email
  password
}

model UserAddress {
  id         String   @id @default(uuid())
  fullname   String
  mobile     String
  unit       String?
  simpang    String
  municiple  String
  district   District @relation(fields: [districtId], references: [id], onDelete: Restrict)
  districtId String   @map("district_id")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  coordinate UserCoordinate?
}

model UserCoordinate {
  id        String @id @default(uuid())
  accuracy  Int
  latitude  Int
  longitude Int

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  address       UserAddress @relation(fields: [userAddressId], references: [id], onDelete: Cascade)
  userAddressId String      @unique @map("user_address_id")
}

model Store {
  id          String   @id @default(uuid())
  fullname    String
  description String?
  mobile      String
  isBlocked   Boolean  @default(false) @map("is_blocked")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products Product[]
  stocks   Stock[]

  addresses StoreAddress[]

  deliveryOptions StoreDeliveryOption[]
}

model StoreAddress {
  id         String   @id @default(uuid())
  fullname   String
  mobile     String
  unit       String?
  simpang    String
  municiple  String
  district   District @relation(fields: [districtId], references: [id], onDelete: Restrict)
  districtId String   @map("district_id")
  createdAt  DateTime @default(now()) @map("createdAt")
  updatedAt  DateTime @updatedAt @map("updated_at")

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String @map("store_id")

  coordinate StoreCoordinate?

  stocks Stock[]
}

model StoreCoordinate {
  id        String @id @default(uuid())
  accuracy  Int
  latitude  Int
  longitude Int

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  address        StoreAddress @relation(fields: [storeAddressId], references: [id], onDelete: Cascade)
  storeAddressId String       @unique @map("store_address_id")
}

model StoreDeliveryOption {
  id             String       @id @default(uuid())
  option         DeliveryType @relation(fields: [deliveryTypeId], references: [id], onDelete: Restrict)
  deliveryTypeId String       @map("delivery_type_id")
  charges        Int
  extraBulk      Int?         @map("extra_bulk")
  destination    District     @relation(fields: [districtId], references: [id], onDelete: Restrict)
  districtId     String       @map("district_id")
  minTime        Int          @map("min_time")
  maxTime        Int          @map("max_time")
  sort           Int
  createdAt      DateTime     @default(now()) @map("createdAt")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String @map("store_id")
}

model ProductImage {
  id   String  @id @default(uuid())
  name String?
  size Int?
  sort Int
  url  String
  path String?

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  inventories Inventory[]
}

model Category {
  id          String   @id @default(uuid())
  imageUrl    String?  @map("image_url")
  name        String
  description String?
  parent      String?
  sort        Int
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  products Product[]
}

model Brand {
  id   String @id @default(uuid())
  name String
  sort Int

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  products Product[]
}

model Product {
  id            String   @id @default(uuid())
  name          String
  description   String?
  salePrice     Int      @map("sale_price")
  retailPrice   Int      @map("retail_price")
  isPublished   Boolean? @default(false) @map("is_published")
  isSoftDeleted Boolean? @default(false) @map("is_soft_deleted")
  createdAt     DateTime @default(now()) @map("createdAt")
  updatedAt     DateTime @updatedAt @map("updated_at")

  images ProductImage[]

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")

  brand   Brand?  @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId String? @map("brand_id")

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String @map("store_id")

  variants    Variant[]
  inventories Inventory[]
  skus        Sku[]
}

model Variant {
  id        String   @id @default(uuid())
  name      String
  sort      Int
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  options Option[]
  skus    Sku[]
}

model Option {
  id        String   @id @default(uuid())
  name      String
  sort      Int
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId String  @map("variant_id")

  skus Sku[]
}

model Sku {
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String    @map("product_id")
  variant     Variant   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantId   String    @map("variant_id")
  option      Option    @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId    String    @map("option_id")
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @map("inventory_id")
  sort        Int

  @@id(name: "id", [inventoryId, productId, variantId, optionId])
  @@unique([inventoryId, variantId])
}

model Inventory {
  id          String   @id @default(uuid())
  sku         String
  salePrice   Int      @default(0) @map("sale_price")
  retailPrice Int      @default(0) @map("retail_price")
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updated_at")

  stocks Stock[]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  skus      Sku[]

  imagePointer   ProductImage? @relation(fields: [imagePointerId], references: [id], onDelete: SetNull)
  imagePointerId String?       @map("image_pointer_id")
}

model Stock {
  id       String @id @default(uuid())
  quantity Int    @default(0)
  location String

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  inventoryId String    @map("inventory_id")

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId String @map("store_id")

  branch   StoreAddress @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId String       @map("branch_id")
}

model GlobalMessage {
  id        String   @id @default(uuid())
  message   String
  expiredAt DateTime @map("expired_at")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updated_at")
}

enum OTP_STATUS {
  UNUSED
  DEPRECATED
  CONSUMED
}

model otp {
  id        String     @id @default(uuid())
  code      String
  status    OTP_STATUS @default(UNUSED)
  createdAt DateTime   @default(now()) @map("createdAt")
  updatedAt DateTime   @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
}

enum Role {
  Customer
  MerchantSuperAdmin
  MerchantAdmin
  MerchantDriver
  MasterSuperAdmin
}

model Session {
  id     String  @id @default(uuid())
  userId String? @map("user_id")
  role   Role[]  @default([Customer])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
